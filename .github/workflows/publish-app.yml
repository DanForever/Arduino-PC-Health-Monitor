name: Publish Companion app

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version number to apply to the companion app assemblies and installer
        required: true
  
env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: ./Windows/HardwareMonitor.sln

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Publish

  INSTALLER_FILENAME: Hardware-monitor-installer
  
  ARDUINO_CLI_VERSION: 0.27.1

jobs:
  create-draft-release:
    name: Create Draft Release
    runs-on: ubuntu-latest
    steps:
      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "companion-app.v${{ github.event.inputs.version }}"
          release_name: "companion-app.v${{ github.event.inputs.version }}"
          draft: true
          prerelease: false
    outputs:
      release-id: ${{ steps.create_release.outputs.id }}
      release-url: ${{ steps.create_release.outputs.upload_url }}

  build-tools:
    runs-on: ubuntu-latest
    steps:
      - name: Download Arduino-cli
        run: |
          wget -O arduino-cli-${{ env.ARDUINO_CLI_VERSION }}-x86.zip https://github.com/arduino/arduino-cli/releases/download/${{ env.ARDUINO_CLI_VERSION }}/arduino-cli_${{ env.ARDUINO_CLI_VERSION }}_Windows_32bit.zip
          wget -O arduino-cli-${{ env.ARDUINO_CLI_VERSION }}-x64.zip https://github.com/arduino/arduino-cli/releases/download/${{ env.ARDUINO_CLI_VERSION }}/arduino-cli_${{ env.ARDUINO_CLI_VERSION }}_Windows_64bit.zip

      - name: Store arduino-cli binary as asset x86
        uses: actions/upload-artifact@v3
        with:
          name: arduino-cli-${{ env.ARDUINO_CLI_VERSION }}-x86.zip
          path: arduino-cli-${{ env.ARDUINO_CLI_VERSION }}-x86.zip
          retention-days: 30
          
      - name: Store arduino-cli binary as asset x64
        uses: actions/upload-artifact@v3
        with:
          name: arduino-cli-${{ env.ARDUINO_CLI_VERSION }}-x64.zip
          path: arduino-cli-${{ env.ARDUINO_CLI_VERSION }}-x64.zip
          retention-days: 30

  build-and-upload:
    runs-on: windows-2019
    needs: [create-draft-release, build-tools]
    strategy:
      matrix:
        build-platform: ["x86", "x64"]
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install MSBuild
      uses: microsoft/setup-msbuild@v1.1

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    # Is there a way to loop over these?
    - name: Apply Version number to the Frontend assembly
      uses: ./.github/workflows/set-csproj-version
      with:
        version: ${{ github.event.inputs.version }}
        filepath: ./Windows/Frontend/Frontend.csproj

    - name: Apply Version number to the Workhorse assembly
      uses: ./.github/workflows/set-csproj-version
      with:
        version: ${{ github.event.inputs.version }}
        filepath: ./Windows/Workhorse/Workhorse.csproj

    - name: Apply Version number to the AdditionalMemoryMetrics assembly
      uses: ./.github/workflows/set-csproj-version
      with:
        version: ${{ github.event.inputs.version }}
        filepath: ./Windows/AdditionalMemoryMetrics/AdditionalMemoryMetrics.csproj

    - name: Apply Version number to the FramerateMetrics assembly
      uses: ./.github/workflows/set-csproj-version
      with:
        version: ${{ github.event.inputs.version }}
        filepath: ./Windows/FramerateMetrics/FramerateMetrics.csproj

    - name: Apply Version Number to the Installer
      shell: bash
      run: sed -i 's/<?define MyProductVersion = "0\.0\.1" ?>/<?define MyProductVersion = "${{ github.event.inputs.version }}" ?>/g' ./Windows/Installer/product.wxs

    - name: Download Arduino CLI artifact
      uses: actions/download-artifact@v3
      with:
        name: arduino-cli-${{ env.ARDUINO_CLI_VERSION }}-${{matrix.build-platform}}.zip
        path: ./Windows/External

    - name: Unpack Arduino CLI executable and remove downloaded artifact
      run: |
        unzip ./Windows/External/arduino-cli-${{ env.ARDUINO_CLI_VERSION }}-${{matrix.build-platform}}.zip -d ./Windows/External
        rm ./Windows/External/arduino-cli-${{ env.ARDUINO_CLI_VERSION }}-${{matrix.build-platform}}.zip

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{matrix.build-platform}} ${{env.SOLUTION_FILE_PATH}}
      
    - name: Upload
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-draft-release.outputs.release-url }}
        asset_path: ./Windows/bin/Installer/Installer.msi
        asset_name: ${{env.INSTALLER_FILENAME}}.${{ matrix.build-platform }}.msi
        asset_content_type: application/x-msi

  publish-draft:
    name: Publish Draft Release
    runs-on: ubuntu-latest
    needs: [create-draft-release, build-and-upload]
    steps:
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.create-draft-release.outputs.release-id }}
